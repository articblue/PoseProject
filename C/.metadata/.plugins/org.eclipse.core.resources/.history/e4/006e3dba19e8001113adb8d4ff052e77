/*
 ============================================================================
 Name        : ReconizeHumanObserved.c
 Author      : Madison Blake
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#define MAX_NUMBER_OF_OBSERVATIONS_DONE 100
#define MAX_NUMBER_OF_ACTIVITIES 10

#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <string.h>
#include <time.h>

#include "XMLHumanPoseRead.h"
#include "XMLHumanActivityRead.h"
#include "MatchPatternToObserved.h"
#include "CacheUnit.h"
#include "PatternString.h"
#include "CharacterSequence.h"

int main(void)
{
	int i, j, A_index, O_index;
	int O_count = 0;
	int A_count = 0;
	clock_t start_t, end_t;

	//I could make these next two arrays dynamic
	//Then again... I could not...

	//All Observed Character Sequence
	CharacterSequence O[MAX_NUMBER_OF_OBSERVATIONS_DONE];

	//All activities to reconize
	PatternString A[MAX_NUMBER_OF_ACTIVITIES];

	DIR* dp;
	struct dirent *ep;

	//Read from Observed folder
	dp = opendir("Observed");
	if (dp != NULL)
	{
		int count = 0;
		ep = readdir(dp);
		while (ep != NULL)
		{
			//skip first two entries ("." and "..") fore my code cant deal with that
			if(count < 2)
				count++;
			else
			{
				CharacterSequence O_tmp;
				char FILE[200] = "Observed/";
				strcat(FILE, ep->d_name);
				printf("Observed File: %s\n", FILE);
				//if(XMLHumanPoseRead(FILE, &O_tmp) == EVERYTHINGISOKAY)
				{
					O[O_count] = O_tmp;
					O_count++;
				}
			}

			ep = readdir(dp);
		}
		(void) closedir (dp);
	}
	else
	{
		printf ("Couldn't open Observed directory");
		return EXIT_FAILURE;
	}


	//Read from Activity folder
	dp = opendir("Activities");
	if (dp != NULL)
	{
		int count = 0;
		ep = readdir(dp);
		while (ep != NULL)
		{
			//skip first two entries ("." and "..") fore my code cant deal with that
			if(count < 2)
				count++;
			else
			{
				PatternString A_tmp;
				char FILE[200] = "Activities/";
				strcat(FILE, ep->d_name);
				printf("Activity File: %s\n", FILE);
				//if(XMLHumanActivityRead(FILE, &A_tmp) == EVERYTHINGISOKAY)
				{
					A[A_count] = A_tmp;
					A_count++;
				}
			}

			ep = readdir(dp);
		}
		(void) closedir (dp);
	}
	else
	{
		printf ("Couldn't open Activities directory");
		return EXIT_FAILURE;
	}


	printf("%d Observations\n", O_count);
	printf("%d Activities\n", A_count);

	start_t = clock();

	for(O_index = 0 ; O_index < O_count; O_index++)
	{
		printf("Observed Activity:%d DataSource:%d Subject:%d Trial:%d\n", O[O_index].activity, O[O_index].data_source, O[O_index].subject, O[O_index].trial);
		for(A_index = 0 ; A_index < A_count ; A_index++)
		{
			//compute max length
			int max_activity_length = 0;
			for(i = 0 ; i < A[A_index].N ; i++)
			{
				max_activity_length += A[A_index].max[i];
			}

			//compute min length
			int min_activity_length = 0;
			for(i = 0 ; i < A[A_index].N ; i++)
			{
				min_activity_length += A[A_index].min[i];
			}

			//Construct Cache
			//Cache is size of pattern by maximum possible string
			CacheUnit ***cache = malloc( max_activity_length * sizeof(CacheUnit**));
			for(i = 0 ; i < max_activity_length ; i++)
			{
				cache[i] = malloc(A[A_index].N * sizeof(CacheUnit*));
				for(j = 0 ; j < A[A_index].N ; j++)
				{
					cache[i][j] = malloc(sizeof(CacheUnit));
					cache[i][j]->value = (double)-1;
					cache[i][j]->set = 0;
				}
			}

			int check;
			int number_of_checks = O[O_index].N + max_activity_length;
			float* errors = malloc(sizeof(float) * number_of_checks);
			for(check = 0 ; check < number_of_checks ; check++)
			{
				//find where the start of the substring needs to be
				int start;
				if(check < max_activity_length)
					start = 0;
				else
					start = check - max_activity_length;

				int end;
				if(check >= O[O_index].N)
					end = O[O_index].N;
				else
					end = check;

				CharacterSequence sub_O = subCharacterSequence(&O[O_index], start, end);

				//because we are not starting 0 it means we incrimented our starting point
				//so we must move the cache
				if(start > 0)
				{
					//save off pointer for unessessary column
					CacheUnit** Tmp = cache[0];

					//shift cache all to the left
					for (j = 0  ; j < max_activity_length - 2 ; j++)
					{
						cache[j] = cache[j + 1];
					}

					//Set last column to the temporay and assign all as unset
					cache[max_activity_length - 1] = Tmp;
					for(j = 0 ; j < A[A_index].N ; j++)
					{
						cache[max_activity_length - 1][j]->set = 0;
					}
				}

				//Dynamically allocate C and D arrays
				float** C = malloc(sizeof(float*) * A[A_index].N);
				int** D = malloc(sizeof(int*) * A[A_index].N);
				for(i = 0 ; i < A[A_index].N ; i++)
				{
					C[i] = malloc(sizeof(float) * sub_O.N);
					D[i] = malloc(sizeof(int) * sub_O.N);
					for(j = 0 ; j < sub_O.N ; j++)
					{
						C[i][j] = 0.0;
						D[i][j] = 0;
					}
				}

				//printf("%f\n", distance(A[A_index].P[0], O.P[0], A[A_index].W));
				//errors[check] = matchPatternToObserved(&A[A_index], &sub_O, cache, (NUM (*)(CHARACTER, CHARACTER, const NUM*))&humanError, C, D);
				//printf("start: %d end:%d : %f\n", start, end, errors[check]);



				//free up C and D
				for(i = 0 ; i < A[A_index].N ; i++)
				{
					free(C[i]);
					free(D[i]);
				}
				free(C);
				free(D);
			}

			float min_error = -1;
			int an_error_found = 0;
			for(i = 0 ; i < number_of_checks ; i++)
			{
				if(an_error_found == 0 && errors[i] > 0)
				{
					min_error = errors[i];
					an_error_found = 1;
				}
				else if(errors[i] > 0 && errors[i] < min_error)
					min_error = errors[i];
			}
			printf("  Activity %d: %f\n", A[A_index].id, min_error);

			//free up stuff
			for(i = 0 ; i < max_activity_length ; i++)
			{
				for(j = 0 ; j < A[A_index].N ; j++)
				{
					free(cache[i][j]);
				}
				free(cache[i]);
			}
			free(cache);
			free(errors);
		}
	}

	end_t = clock();

	printf("Execution time of %f sec\n", (double)(end_t-start_t)/CLOCKS_PER_SEC);
	printf("DONE\n");
	return EXIT_SUCCESS;
}
