/*
 * MatchObservedToActivityAlphabet.c
 *
 *  Created on: Aug 9, 2012
 *      Author: madisob
 */



#include "MatchPatternToObserved.h"

#include "Constants.h"

#if DEBUG_OUTPUT > 0
	#include <stdio.h>
#endif

#ifndef max
	#define max( a, b ) ( ((a) > (b)) ? (a) : (b) )
#endif

#ifndef min
	#define min( a, b ) ( ((a) < (b)) ? (a) : (b) )
#endif


INT sumFloorEach(NUM* A, INT S, INT E, NUM div);

//! Finds the score of some observation to an activity
/*!
 * Can save results in a chache so that results computed can be saved and used in a future calling
 *
 \param P 			Pattern to match against
 \param O 			Observed Character sequence
 \param cache 		triple poINTer to save results to save time in the future, set to NULL if not using.
 \param *E 			Function poINTer for computing the Error
 \param C			Two dim array for a section of memory to hold the cost for the string matching.
 \param D			Two dim array for a section of memory to hold the number of deletions done for string.
 \param maxScore	A score which to quit on, set to NULL to not use
 \return 			Score of how well the Observed sequence matches to the pattern
 \sa PatternString CharacterSequence CacheUnit
 */
NUM matchPatternToObserved(const PatternString* P, const CharacterSequence* O, CacheUnit*** cache, NUM (*E)(CHARACTER, CHARACTER, const NUM* W), NUM** C, INT** D, NUM* maxScore)
{
	INT i;
	INT j;

	NUM sample_rate_ratio = P->sample_rate / O->sample_rate;

	//Initialize C and D
	for(i = 0 ; i < P->N ; i++)
	{
		for(j = 0 ; j < O->N ; j++)
		{
			C[i][j] = 0;
			D[i][j] = 0;
		}
	}

	//Loop which goes down each character in the activity
	INT startAt = 0;
	for(i = 0 ; i < P->N ; i++)
	{
#if DEBUG_OUTPUT == 2
		for(j = 0 ; j < startAt ; j++)
		{
			printf("              -|");
		}
#endif
		INT value_found = 0;
		for(j = startAt; j < O->N ; j++)
		{
			INT deletion_set = 0;
			INT substitution_set = 0;
			NUM deletion_cost = -1;
			NUM substitution_cost = -1;

			// initial case
			if(i == 0 && j == 0)
			{
				C[0][0] = E(P->C[0], O->C[0], P->W);
				D[0][0] = 1;
				value_found= 1;

#if DEBUG_OUTPUT == 1
				printf("Start - C[0][0] = %f\n", C[0][0]);
#endif
#if DEBUG_OUTPUT == 2
				printf("%15.1f|", C[0][0]);
#endif

				continue;
			}


			// deletion legal
			// first check that not along left side
			// Then check that a sub has been done on the left
			// Then check that the maximum number of insertions has not been performed (take the ceil)
			if(j > 0 && D[i][j-1] > 0 && D[i][j-1] < (INT)(P->max[i] / sample_rate_ratio + 1))
			{
				//check cache
				double editCost;
				if(cache == 0)
					editCost = E(P->C[i], O->C[j], P->W);
				else
				{
					if(cache[j][i]->set == 0)
					{
						editCost = E(P->C[i], O->C[j], P->W);
						cache[j][i]->value = editCost;
						cache[j][i]->set = 1;
					}
					else
					{
						editCost = cache[j][i]->value;
					}
				}

				deletion_cost = C[i][j-1] + editCost;
				deletion_set = 1;

				//if the new cost excedes the maximum then we cant do it
				if(maxScore != 0 && *maxScore < deletion_cost)
				{
					deletion_set = 0;
				}
			}

			//Substitution checking
			//First to make sure not on top or left edge
			//Then check if the spot comming from has done the minimum number of deletions
			//  We must round down P->min[i-1] / sample_rate_ratio
			if(i > 0 && j > 0 && D[i-1][j-1] >= max(1, (INT)(P->min[i-1] / sample_rate_ratio)))
			{

				//if doing a substitution means we will eventually run out of room,
				//don't do it
				if(O->N - j >= sumFloorEach(P->min, i, P->N, sample_rate_ratio))
				{
					double editCost;
					if(cache == 0)
						editCost = E(P->C[i], O->C[j], P->W);
					else
					{
						if(cache[j][i]->set == 0)
						{
							editCost = E(P->C[i], O->C[j], P->W);
							cache[j][i]->value = editCost;
							cache[j][i]->set = 1;
						}
						else
						{
							editCost = cache[j][i]->value;
						}
					}

					substitution_cost = C[i-1][j-1] + editCost;
					substitution_set = 1;

					//if the new cost excedes the maximum then we cant do it
					if(maxScore != 0 && *maxScore < deletion_cost)
					{
						substitution_set = 0;
					}
				}
			}

			//if both are still unset then we
			//    1: set the start at point and continue
			//    2: or if already found data skip the rest of the row
			if(deletion_set == 0 && substitution_set == 0)
			{
#if DEBUG_OUTPUT == 2
				printf("              -|");
#endif

				if(value_found == 0)
				{
					startAt = j + 1;
					continue;
				}
				else
					break;
			}

			//if either is unset than the the other must be set so choose that one
			if(deletion_set == 0)
			{
				C[i][j] = substitution_cost;
				value_found = 1;
				D[i][j] = 1;
#if DEBUG_OUTPUT == 1
				printf("Sub - C[%d][%d] = %f D[%d][%d] = %d\n",i, j, C[i][j], i, j, D[i][j]);
#endif
#if DEBUG_OUTPUT == 2
				printf("%15.1f|", C[i][j]);
#endif

				continue;
			}
			if(substitution_set == 0)
			{
				C[i][j] = deletion_cost;
				value_found = 1;
				D[i][j] = D[i][j-1] + 1;
#if DEBUG_OUTPUT == 1
				printf("Ins - C[%d][%d] = %f D[%d][%d] = %d\n",i, j, C[i][j], i, j, D[i][j]);
#endif
#if DEBUG_OUTPUT == 2
				printf("%15.1f|", C[i][j]);
#endif

				continue;
			}

			//both are set so pick the min
			if(substitution_cost < deletion_cost)
			{
				C[i][j] = substitution_cost;
				value_found = 1;
				D[i][j] = 1;
#if DEBUG_OUTPUT == 1
				printf("Sub - C[%d][%d] = %f D[%d][%d] = %d\n",i, j, C[i][j], i, j, D[i][j]);
#endif
#if DEBUG_OUTPUT == 2
				printf("%15.1f|", C[i][j]);
#endif
				continue;
			}
			else
			{
				C[i][j] = deletion_cost;
				D[i][j] = D[i][j-1] + 1;
#if DEBUG_OUTPUT == 1
				printf("Ins - C[%d][%d] = %f D[%d][%d] = %d\n",i, j, C[i][j], i, j, D[i][j]);
#endif
#if DEBUG_OUTPUT == 2
				printf("%15.1f|", C[i][j]);
#endif
				value_found = 1;
				continue;
			}
		}
#if DEBUG_OUTPUT == 2
		printf("\n");
#endif
	}

	//now we must find the solution
	//its along the bottom but not nessessarly at the right edge due to the solution could be in a substring
	char solution_found = 0;
	NUM min_solution = 0;
	for(i = 0 ; i < O->N ; i++)
	{
		if(D[P->N - 1][i] >= (INT)(P->min[P->N - 1] / sample_rate_ratio ))
		{
			if(solution_found == 0  && C[P->N - 1][i] > 0.0)
			{
				min_solution = C[P->N - 1][i]/((i+1) * sample_rate_ratio);
				solution_found = 1;
			}
			else if(min_solution > C[P->N - 1][i]/((i+1) * sample_rate_ratio) && C[P->N - 1][i] > 0)
			{
				min_solution = C[P->N - 1][i]/((i+1) * sample_rate_ratio);
			}
		}
	}

	//Find Edit distance
	NUM ed;
	if(solution_found == 1)
		ed = min_solution;
	else
		ed = -1;

	return ed;
}

//! Floor's each element in a vector and adds up
/*!
 \param A 		Array to sum
 \param S 		Start
 \param E 		End
 \param div 	NUM to divide each element by
 \return 		Sum of the floor of each element
 */
INT sumFloorEach(NUM* A, INT S, INT E, NUM div)
{
	INT i;
	INT V = 0;
	for(i = S ; i < E ; i++)
	{
		V += max(1, (INT)(A[i] / div));
	}

	return V;
}
