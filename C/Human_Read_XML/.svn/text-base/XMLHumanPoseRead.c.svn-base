/*
 * XMLHumanPoseRead.c
 *
 *  Created on: Aug 10, 2012
 *      Author: madisob
 */

#include "XMLHumanPoseRead.h"

#include <stdio.h>
#include <mxml.h>

//! Reads xml file and converts to a sequence of poses
/*!
  Reads an xml file which contains some animation of an activity being performed.
  The XML file is parsed and the sequence P is filled out
  \param file Filename of the XML file
  \param S Pointer to an already created CharacterSequence structure
  \return Error
  \sa PoseSequence
 */
READ_ERRORS XMLHumanPoseRead(const char* file, CharacterSequence* S)
{
	int i;
	FILE *fp;
	mxml_node_t *tree;

	float sample_rate;
	int N;
	POSE* C;

	int activity;
	int data_source;
	int subject;
	int trial;

	//construct XML tree
	fp = fopen(file, "r");
	if(fp == NULL)
	{
		printf("No File: %s\n", file);
		return EVERYTHINGBROKE;
	}
	tree = mxmlLoadFile(NULL, fp, MXML_NO_CALLBACK);
	fclose(fp);

	//anyalize tree
	const char* str_sample_rate = mxmlElementGetAttr(tree, "sample_rate");
	sample_rate = atof(str_sample_rate);

	activity = atoi(mxmlElementGetAttr(tree, "activity"));
	data_source = atoi(mxmlElementGetAttr(tree, "data_source"));
	subject = atoi(mxmlElementGetAttr(tree, "subject"));
	trial = atoi(mxmlElementGetAttr(tree, "trial"));

	N = atoi(mxmlElementGetAttr(tree, "frames"));
	C = malloc(sizeof(POSE) * N);
	for(i = 0 ; i < N ; i++)
	{
		C[i] = malloc(sizeof(SPACE) * POSE_DIMENSION);
	}

	int count = 0;
	mxml_node_t *pose = mxmlFindElement(tree, tree, "pose", NULL, NULL, MXML_DESCEND);
	while(pose != NULL)
	{
		mxml_node_t* dim = mxmlFindElement(pose, tree, "dimension", NULL, NULL, MXML_DESCEND_FIRST);
		while(dim != NULL)
		{
			int dim_index = atoi(mxmlElementGetAttr(dim, "index"));

			float Values[4];

			mxml_node_t* QA  = mxmlFindElement(dim, tree, "quaternion", NULL, NULL, MXML_DESCEND_FIRST);
			int QA_index = atoi(mxmlElementGetAttr(QA, "index"));
			Values[QA_index-1] = atof(mxmlElementGetAttr(QA, "value"));

			mxml_node_t* QB  = mxmlFindElement(QA, tree, "quaternion", NULL, NULL, MXML_NO_DESCEND);
			int QB_index = atoi(mxmlElementGetAttr(QB, "index"));
			Values[QB_index-1] = atof(mxmlElementGetAttr(QB, "value"));

			mxml_node_t* QC  = mxmlFindElement(QB, tree, "quaternion", NULL, NULL, MXML_NO_DESCEND);
			int QC_index = atoi(mxmlElementGetAttr(QC, "index"));
			Values[QC_index-1] = atof(mxmlElementGetAttr(QC, "value"));

			mxml_node_t* QD  = mxmlFindElement(QC, tree, "quaternion", NULL, NULL, MXML_NO_DESCEND);
			int QD_index = atoi(mxmlElementGetAttr(QD, "index"));
			Values[QD_index-1] = atof(mxmlElementGetAttr(QD, "value"));

			C[count][dim_index - 1].w = Values[0];
			C[count][dim_index - 1].x = Values[1];
			C[count][dim_index - 1].y = Values[2];
			C[count][dim_index - 1].z = Values[3];

			dim = mxmlFindElement(dim, tree, "dimension", NULL, NULL, MXML_NO_DESCEND);
		}

		count++;
		pose = mxmlFindElement(pose, tree, "pose", NULL, NULL, MXML_DESCEND);
	}

	if(count != N)
	{
		mxmlDelete(tree);
		for(i = 0 ; i < N ; i++)
		{
			free(C[i]);
		}
		free(C);
		return EVERYTHINGBROKE;
	}

	S->C = (CHARACTER*)C;
	S->N = N;
	S->sample_rate = sample_rate;
	S->activity = activity;
	S->data_source = data_source;
	S->subject = subject;
	S->trial = trial;

	//delete tree
	mxmlDelete(tree);

	return EVERYTHINGISOKAY;
}
